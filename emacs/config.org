#+TITLE: Mer Thich's Emacs Configuration
#+AUTHOR: Mer Thich (programming-programmer)

 * First of all look how sexy this setup is. (Haters wish to be this ✨aesthetic✨) However due to recent events, this is no longer accurate but it sure look banging

[[file:emacs_setup.png]]
* Preface
 * This is copied from what_it_was.txt
    * Make sure init.el's path to config.org is installed
    * use-package making sure is installed doesn't work either so install before
    * Remember: all-the-fonts-install to install font awesome fonts for modeline

    * If there is an error with org, start emacs with "emacs -q" and install org
      9.x. Then reload emacs

* Garbage Collection
 * Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time. The default is 800 kilobytes. Measured in bytes. Garbage collection off during initialization (focus all memory on initialize)
#+begin_src emacs-lisp
    (setq gc-cons-threshold (* 50 1000 1000) 
          gc-cons-percentage 0.6)
#+end_src

 * Reset garbage collection after initialization (return deprecated memory to stack when idle)
#+begin_src emacs-lisp
    (add-hook 'emacs-startup-hook
              (lambda ()
                (setq gc-cons-threshold 16777216 ; 16mb
                      gc-cons-percentage 0.1)))

    (setq gcmh-idle-delay 'auto  ; default is 15s
          gcmh-auto-idle-delay-factor 10
          gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
#+end_src
* Package Management
** Package Sources 
 * Where to gather package sources (MELPA and MELPA stable, ORG, and ELPA)
#+begin_src emacs-lisp
    (require 'package)
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("melpa-stable" . "https://stable.melpa.org/packages/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src

** Use-package
 * Use use-package for easier and more concise package management. yay!
#+begin_src emacs-lisp
    (require 'use-package)
    (setq use-package-always-ensure t)
#+end_src

* Load Custom Lisp Files
#+begin_src emacs-lisp
(load (expand-file-name "funcs.el" user-emacs-directory))
#+end_src
* Startup and Perfomance
** Start Server
#+begin_src emacs-lisp
(server-start)
#+end_src
** Defaults in Emacs
#+begin_src emacs-lisp
  (setq-default
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   sentence-end-double-space nil                    ; Double space after a period!? Inhumane!
   cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
   fill-column 80                                   ; Set width for automatic line breaks
   help-window-select t                             ; Focus new help windows when opened
   indent-tabs-mode t                               ; Prefer tabs over inferior spaces
   inhibit-startup-screen t                         ; Disable start-up screen
   load-prefer-newer t                              ; Prefer the newest version of a file
   mark-ring-max 128                                ; Maximum length of mark ring
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   tab-width 4                                      ; Set width for tabs
   vc-follow-symlinks t                             ; Always follow the symlinks
   view-read-only t)                                ; Always open read only files in view mode

  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show parent paranthesis
  (global-visual-line-mode nil)                     ; Turn off that silly visual line mode
  (savehist-mode t)                                 ; Save history
  (menu-bar-mode -1)                                ; Remove that menubar pls :)
  (tool-bar-mode -1)                                ; Remove toolbar too
  (scroll-bar-mode -1)                              ; Disable visible scrollbar
  (tooltip-mode -1)                                 ; Disable tooltips
  (set-fringe-mode 10)                              ; Give some breathing room  
#+end_src

** Scratch Message / Dashboard
 * I think I've grown past the need for eye-candy on startup. It also slows me
   down 😎
#+begin_src emacs-lisp
  (setq initial-scratch-message
   " 
  


















                                                              ███████╗███╗   ███╗ █████╗  ██████╗███████╗
                                                              ██╔════╝████╗ ████║██╔══██╗██╔════╝██╔════╝
                                                              █████╗  ██╔████╔██║███████║██║     ███████╗
                                                              ██╔══╝  ██║╚██╔╝██║██╔══██║██║     ╚════██║
                                                              ███████╗██║ ╚═╝ ██║██║  ██║╚██████╗███████║
                                                              ╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝
 
   "                                           
    )
#+end_src

** Scrolling improvements
#+begin_src emacs-lisp
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ; one line at a time
    (setq mouse-wheel-progressive-speed nil)            ; don't accelerate scrolling
    (setq mouse-wheel-follow-mouse 't)                  ; scroll window under mouse
    (setq scroll-step 1)                                ; keyboard scroll one line at a time
#+end_src

** No Line Numbers
 * No line numbers for org-mode, programming-mode, text-mode, and conf-mode??
#+begin_src emacs-lisp
  (dolist (mode '(org-mode-hook
                  prog-mode-hook
                  text-mode
                  conf-mode))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
 
** Backups/Lockfiles
#+begin_src emacs-lisp
(setq create-lockfiles nil
      make-backup-files nil
      ;; But in case the user does enable it, some sensible defaults:
      version-control t     ; number each backup file
      backup-by-copying t   ; instead of renaming current file (clobbers links)
      delete-old-versions t ; clean up after itself
      kept-old-versions 5
      kept-new-versions 5
      backup-directory-alist (list (cons "." (concat user-emacs-directory "backup/"))))
#+end_src
** Fullscreen on startup baby!
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook 'toggle-frame-fullscreen)
#+end_src

* Custom Shortcuts
 * *NOTE:* This does not include the *surface area* of custom shortcuts. There are
   multiple thorughout this config and it would be impossible (programmingly??)
   to bring them to one section. So keep that in mind. 
** Duplicate line: C-c d
#+begin_src emacs-lisp
    (defun duplicate-line()
      (interactive)
      (move-beginning-of-line 1)
      (kill-line)
      (yank)
      (open-line 1)
      (next-line 1)
      (yank))

  (global-set-key (kbd "C-c d") 'duplicate-line)
#+end_src

** Rebind M-x
#+begin_src emacs-lisp
 (global-set-key "\C-x\C-m" 'execute-extended-command)
#+end_src

* Addons
** Guru Mode
 * Enable Guru Mode globally (disables arrow keys)
#+begin_src emacs-lisp
  (use-package guru-mode
    :config
    (guru-global-mode +1))
#+end_src

** Which-key
 * Shows which keys are avaliable. HAH! look at that pun. amazing
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.5))
#+end_src

** Nyan Mode 
 * Nyan mode baby! 
#+begin_src emacs-lisp
  (use-package nyan-mode 
    :init (nyan-mode) 
    :config (setq nyan-wavy-trail t))
#+end_src

** Emojis 
 * Shamelessly stolen from this [[https://ianyepan.github.io/posts/emacs-emojis/][blog]]. Install Noto Color Emoji beforehand though 😔
#+begin_src emacs-lisp
  (use-package emojify
    :config
    (when (member "Noto Color Emoji" (font-family-list))
      (set-fontset-font
       t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend))
    (setq emojify-display-style 'unicode)
    (setq emojify-emoji-styles '(unicode))
    (bind-key* (kbd "C-c e") #'emojify-insert-emoji)) ; override binding in any mode
#+end_src

** Evil MoDe
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding t) ;; load Evil keybindings in other modes
    (setq evil-want-fine-undo t)
    (setq evil-want-Y-yank-to-eol t)
    :config
    ;; ----- Keybindings
    (define-key evil-window-map "\C-w" 'evil-delete-buffer) ;; Maps C-w C-w to evil-delete-buffer (The first C-w puts you into evil-window-map)
    (define-key evil-motion-state-map "/" 'swiper)

    ;; ----- Setting cursor colors
    (setq evil-emacs-state-cursor    '("#649bce" box))
    (setq evil-normal-state-cursor   '("#d9a871" box))
    (setq evil-operator-state-cursor '("#ebcb8b" hollow))
    (setq evil-visual-state-cursor   '("#677691" box))
    (setq evil-insert-state-cursor   '("#eb998b" (bar . 2)))
    (setq evil-replace-state-cursor  '("#eb998b" hbar))
    (setq evil-motion-state-cursor   '("#ad8beb" box))

    (evil-mode 1))

  (use-package evil-surround
    :after evil
    :defer 2
    :config
    (global-evil-surround-mode 1))
#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :commands (hide-mode-line-mode))

  (use-package doom-modeline
    :config
    (doom-modeline-mode)
    (setq doom-modeline-enable-word-count nil
          doom-modeline-buffer-encoding nil
          doom-modeline-icon nil ; Enable/disable all icons
          doom-modeline-modal-icon nil ;; Icon for Evil mode
          doom-modeline-major-mode-icon nil
          doom-modeline-major-mode-color-icon nil
          doom-modeline-buffer-state-icon nil
          doom-modeline-bar-width 3))
#+end_src

* Aesthetics
** Font: Source Code Pro
 * NOTE: On a new system, you will have to install Source Code Pro on the system
#+begin_src emacs-lisp
  (set-face-attribute 'default t :height 100 :weight 'medium)
  (set-face-attribute 'default t :font "Source Code Pro")
#+end_src

 * Font for org-mode
#+begin_src emacs-lisp
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Source Code Pro" :height 100 :weight medium))))
   '(fixed-pitch ((t ( :family "Source Code Pro" :height 100)))))
#+end_src 

** Theme: Minimal Grey
#+begin_src emacs-lisp
    (use-package doom-themes
      :config
      (load-theme 'doom-spacegrey t))
#+end_src

** Writeroom
#+begin_src emacs-lisp
(use-package visual-fill-column
  :defer t
  :config
  (setq visual-fill-column-center-text t)
  (if (eq 'jib/computer 'desktop)
      (setq visual-fill-column-width 100)
    (setq visual-fill-column-width 80))
  (setq visual-fill-column-center-text t))

(use-package writeroom-mode
  :defer t
  :config
  (setq writeroom-maximize-window nil
        writeroom-mode-line t
        writeroom-global-effects nil ;; No need to have Writeroom do any of that silly stuff
        writeroom-extra-line-spacing 3) 
  (setq writeroom-width visual-fill-column-width)
  )
#+end_src

* Keybindings
#+begin_src emacs-lisp
(use-package general)
#+end_src
** SPC Leader Key
#+begin_src emacs-lisp
  (general-define-key
   :states '(normal motion visual)
   :keymaps 'override
   :prefix "SPC"
#+end_src

*** Top level functions
#+begin_src emacs-lisp
   "f" '(counsel-find-file :which-key "find file")
   "r" '(counsel-recentf :which-key "recent files")
   "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
   "SPC" 'counsel-M-x
   "C-q" '(save-buffers-kill-terminal :which-key "quit emacs")
   "c" 'org-capture
#+end_src
*** Applications
#+begin_src emacs-lisp
;; "Applications"
"a" '(nil :which-key "applications")
"ao" '(org-agenda :which-key "org-agenda")
;; "am" '(mu4e :which-key "mu4e")
;; "aC" '(calc :which-key "calc")
"ac" '(org-capture :which-key "org-capture")

"ad" '(dired :which-key "dired")
#+end_src
*** Buffers
#+begin_src emacs-lisp
"b" '(nil :which-key "buffer")
"bb" '(counsel-switch-buffer :which-key "switch buffers")
"bd" '(evil-delete-buffer :which-key "delete buffer")
#+end_src
*** Files
#+begin_src emacs-lisp
;; Files
"f" '(nil :which-key "files")
"fb" '(counsel-bookmark :which-key "bookmarks")
"ff" '(counsel-find-file :which-key "find file")
"fr" '(counsel-recentf :which-key "recent files")
"fR" '(rename-file :which-key "rename file")
"fs" '(save-buffer :which-key "save buffer")
"fS" '(evil-write-all :which-key "save all buffers")
#+end_src
*** Help/Emacs
#+begin_src emacs-lisp
;; Help/emacs
"h" '(nil :which-key "help/emacs")

"hv" '(counsel-describe-variable :which-key "des. variable")
"hb" '(counsel-descbinds :which-key "des. bindings")
"hM" '(describe-mode :which-key "des. mode")
"hf" '(counsel-describe-function :which-key "des. func")
"hF" '(counsel-describe-face :which-key "des. face")
"hk" '(describe-key :which-key "des. key")

"hm" '(nil :which-key "switch mode")
"hme" '(emacs-lisp-mode :which-key "elisp mode")
"hmo" '(org-mode :which-key "org mode")
"hmt" '(text-mode :which-key "text mode")

"hp" '(nil :which-key "packages")
"hpr" 'package-refresh-contents
"hpi" 'package-install
"hpd" 'package-delete
#+end_src
*** Toggles/Visuals
#+begin_src emacs-lisp
;; Toggles
"t" '(nil :which-key "toggles")
"tt" '(toggle-truncate-lines :which-key "truncate lines")
"tv" '(visual-line-mode :which-key "visual line mode")
"tn" '(display-line-numbers-mode :which-key "display line numbers")
"tw" '(writeroom-mode :which-key "writeroom-mode")
"tR" '(read-only-mode :which-key "read only mode")
"tm" '(hide-mode-line-mode :which-key "hide modeline mode")
#+end_src
*** Windows
#+begin_src emacs-lisp
"w" '(nil :which-key "window")
"wm" '(jib/toggle-maximize-buffer :which-key "maximize buffer")
"wN" '(make-frame :which-key "make frame")
"wd" '(evil-window-delete :which-key "delete window")
"w-" '(jib/split-window-vertically-and-switch :which-key "split below")
"w/" '(jib/split-window-horizontally-and-switch :which-key "split right")
"wl" '(evil-window-right :which-key "evil-window-right")
"wh" '(evil-window-left :which-key "evil-window-left")
"wj" '(evil-window-down :which-key "evil-window-down")
"wk" '(evil-window-up :which-key "evil-window-up")
"wz" '(text-scale-adjust :which-key "text zoom")
#+end_src

*** End SPC prefix block
#+begin_src emacs-lisp
)
#+end_src
** All-mode keybindings
#+begin_src emacs-lisp
  (general-def
    :keymaps 'override

    ;; Emacs ---
    "C-x C-m" 'counsel-M-x

    ;; Utility ---
    "C-c c" 'org-capture
    "C-c a" 'org-agenda
    "C-s" 'swiper
    )
#+end_src
** Insert Mode Keymaps
#+begin_src emacs-lisp
  ;; Insert keymaps
  (general-def
    :states '(insert)
    "C-a" 'evil-beginning-of-visual-line
    "C-g" 'evil-normal-state
    "C-e" 'evil-end-of-visual-line
    "C-S-a" 'evil-beginning-of-line
    "C-S-e" 'evil-end-of-line
    "C-n" 'evil-next-visual-line
    "C-p" 'evil-previous-visual-line
    )
#+end_src
* Ivy
 * Ivy is an excellent completion framework for Emacs. It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs. 
#+begin_src emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :general
    (general-define-key
     ;; Also put in ivy-switch-buffer-map b/c otherwise switch buffer map overrides and C-k kills buffers
     :keymaps '(ivy-minibuffer-map ivy-switch-buffer-map)
     "S-SPC" 'nil
     "C-SPC" 'ivy-restrict-to-matches ;; Default is S-SPC, changed this b/c sometimes I accidentally hit S-SPC
     ;; C-j and C-k to move up/down in Ivy
     "C-k" 'ivy-previous-line
     "C-j" 'ivy-next-line)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)

    (ivy-mode 1)
    )  

#+end_src

** Ivy Rich
 * ivy-rich adds extra columns to a few of the Counsel commands to provide more information about each item.
 #+begin_src emacs-lisp
   (use-package ivy-rich
    :init
    (setq ivy-rich-path-style 'abbrev)
    (ivy-rich-mode 1))
 #+end_src

* Counsel
 * Counsel is a customized set of commands to replace `find-file` with
   `counsel-find-file`, etc which provide useful commands for each of the default completion commands.
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("C-x b" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))
#+end_src

* Org-Mode
** Org mode setup 
 * Turn on indentation and auto-fill mode for Org files
#+begin_src emacs-lisp
  (defun dw/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode)) 
#+end_src

 * This is another setup :)
#+begin_src emacs-lisp
    (use-package org
       :defer t
       :hook (org-mode . dw/org-mode-setup)
#+end_src

** Org Config
#+begin_src emacs-lisp
  :config
  (setq
#+end_src

*** Org Ellipsis
#+begin_src emacs-lisp
  org-ellipsis " ▾"
#+end_src

*** Keywords
#+begin_src emacs-lisp
org-todo-keywords
      '((sequence "TODO" "PROG" "DONE"))
#+end_src

*** Faces
#+begin_src emacs-lisp
    org-todo-keyword-faces
          '(("PROG" . (:foreground "red" :weight bold)))         
#+end_src

*** Source Fontify
#+begin_src emacs-lisp
  org-src-fontify-natively t
#+end_src

*** Quote and Verse Blocks
#+begin_src emacs-lisp
  org-fontify-quote-and-verse-blocks t
#+end_src

*** Org Tab Behaviors
#+begin_src emacs-lisp
  org-src-tab-acts-natively t
#+end_src

*** Source Code indentation
#+begin_src emacs-lisp
  org-edit-src-content-indentation 2
#+end_src

*** Block Startup
#+begin_src emacs-lisp
  org-hide-block-startup nil
#+end_src

*** Org Indentation
#+begin_src emacs-lisp
  org-src-preserve-indentation nil
#+end_src

*** Folded Org Headers
#+begin_src emacs-lisp
  org-startup-folded 'content
#+end_src

*** Seperator Lines
#+begin_src emacs-lisp
  org-cycle-separator-lines 2
#+end_src

*** Inline Images
#+begin_src emacs-lisp
  org-startup-with-inline-images t
#+end_src

*** Emphasis Markers
#+begin_src emacs-lisp
  org-hide-emphasis-markers t
#+end_src

*** Org Agenda Column View
#+begin_src emacs-lisp
  org-agenda-overriding-columns-format
  "%PRIORITY %TODO %ITEM %TAGS"
#+end_src

*** End of Org Defualt Block
#+begin_src emacs-lisp
)
#+end_src

*** Evil Org
#+begin_src emacs-lisp
(use-package evil-org
  :diminish evil-org-mode
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme))))

(require 'evil-org-agenda)
(evil-org-agenda-set-keys)
#+end_src

** Org mode Keybindings
#+begin_src emacs-lisp
(general-define-key
 :prefix ","
 :states 'motion
 :keymaps '(org-mode-map)
 "" nil
 "A" '(org-archive-subtree-default :which-key "org-archive")
 "a" '(org-agenda :which-key "org agenda")
 "6" '(org-sort :which-key "sort")
 "c" '(org-capture :which-key "org-capture")
 "s" '(org-schedule :which-key "schedule")
 "S" '(jib/org-schedule-tomorrow :which-key "schedule tmrw")
 "d" '(org-deadline :which-key "deadline")
 "g" '(counsel-org-goto :which-key "goto heading")
 "t" '(counsel-org-tag :which-key "set tags")
 "p" '(org-set-property :which-key "set property")
 "e" '(org-export-dispatch :which-key "export org")
 "." '(org-toggle-narrow-to-subtree :which-key "toggle narrow to subtree")

 "1" '(org-toggle-link-display :which-key "toggle link display")
 "2" '(org-toggle-inline-images :which-key "toggle images")

 ;; insert
 "i" '(nil :which-key "insert")

 "il" '(org-insert-link :which-key "org-insert-link")
 "l" '(org-insert-link :which-key "org-insert-link") ;; More convenient access
 "iL" '(counsel-org-link :which-key "counsel-org-link")

 "is" '(nil :which-key "insert stamp")
 "iss" '((lambda () (interactive) (call-interactively (org-time-stamp-inactive))) :which-key "org-time-stamp-inactive")
 "isS" '((lambda () (interactive) (call-interactively (org-time-stamp nil))) :which-key "org-time-stamp")

 ;; clocking
 "c" '(nil :which-key "clocking")
 "ci" '(org-clock-in :which-key "clock in")
 "co" '(org-clock-out :which-key "clock out")
 "cj" '(org-clock-goto :which-key "jump to clock")
 )
#+end_src

** Org Agenda Keybindings
#+begin_src emacs-lisp
(general-define-key
 :prefix ","
 :states 'motion
 :keymaps '(org-agenda-mode-map)
 "" nil
 "a" '(org-agenda :which-key "org agenda")
 "c" '(org-capture :which-key "org-capture")
 "s" '(org-agenda-schedule :which-key "schedule")
 "," '(org-agenda-schedule :which-key "schedule") ;; quick access
 "d" '(org-agenda-deadline :which-key "deadline")
 "t" '(org-agenda-set-tags :which-key "set tags")
 ;; clocking
 "c" '(nil :which-key "clocking")
 "ci" '(org-agenda-clock-in :which-key "clock in")
 "co" '(org-agenda-clock-out :which-key "clock out")
 "cj" '(org-clock-goto :which-key "jump to clock")
 )

(evil-define-key 'motion org-agenda-mode-map
  (kbd "f") 'org-agenda-later
  (kbd "b") 'org-agenda-earlier)
#+end_src

** Org Capture Templates
#+begin_src emacs-lisp
    (setq org-capture-templates '(
#+end_src

*** Template
#+begin_src emacs-lisp
   ("t" "Todo" entry (file+headline "/mnt/chromeos/GoogleDrive/MyDrive/SchoolDocuments/Notes/20230527140013-refile.org" "Tasks")
    "* TODO %?\n ")
#+end_src

*** Meeting Template
#+begin_src emacs-lisp
   ("m" "Scheduled Meeting" entry (file+headline "/mnt/chromeos/GoogleDrive/MyDrive/SchoolDocuments/Notes/20230527140013-refile.org" "Meetings")
  "* %?\n ")
#+end_src

*** Reminders Template
#+begin_src emacs-lisp
   ("r" "Reminders" entry (file+headline "/mnt/chromeos/GoogleDrive/MyDrive/SchoolDocuments/Notes/20230527140013-refile.org" "Reminders")
  "* %?\n ")
#+end_src

*** Idea Template
#+begin_src emacs-lisp
   ("i" "Anything Ideas" entry (file+headline "/mnt/chromeos/GoogleDrive/MyDrive/SchoolDocuments/Notes/20230527140013-refile.org" "Ideas")
  "* %?\n ")
#+end_src

*** End of Org Capture Template
#+begin_src emacs-lisp
   ))
#+end_src

** Command to start Org-agenda: C-c a
#+begin_src emacs-lisp
  (global-set-key "\C-ca" 'org-agenda)
#+end_src

** Command to start Org-capture: C-c c
#+begin_src emacs-lisp
  (global-set-key "\C-cc" 'org-capture)
#+end_src

** Org-indent Face
 * Make sure org-indent face is avaliable
#+begin_src emacs-lisp
    (require 'org-indent)
#+end_src

** Pretty Header Bullet Points
 * Nice header bullet points
#+begin_src emacs-lisp
    (use-package org-superstar
      :after org
      :hook (org-mode . org-superstar-mode)
      :custom
      (org-superstar-remove-leading-stars t)
      (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Header Sizes
#+begin_src emacs-lisp
    (custom-set-faces
     '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
     '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
     '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
     '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
     '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
     )
#+end_src

** Code block templates
 * Type "<el" then hit Tab to expand template. More can be found [[https://orgmode.org/manual/Easy-templates.html][here]]. This is needed as of Org 9.2
#+begin_src emacs-lisp
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src

** Pretty Symbols
#+begin_src emacs-lisp
  ;; Prettifying src blocks
  (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "†")
                                         ("#+END_SRC" . "†")
                                         ("#+begin_src" . "†")
                                         ("#+end_src" . "†")
                                         (">=" . "≥")
                                         ("=>" . "⇨")))

  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (add-hook 'org-mode-hook 'prettify-symbols-mode)
#+end_src

** End of Org Block
#+begin_src emacs-lisp   
 )
#+end_src

* Org-Roam
#+begin_src emacs-lisp
  (use-package org-roam
#+end_src

** Org Roam Directory
#+begin_src emacs-lisp  
    :custom
    (org-roam-directory "/mnt/chromeos/GoogleDrive/MyDrive/SchoolDocuments/Notes")
#+end_src

** Org Roam Completion
#+begin_src emacs-lisp
    (org-roam-completion-everywhere t)
    #+end_src

** Org Roam Capture Template
#+begin_src emacs-lisp
   (org-roam-capture-templates '(
#+end_src

*** Default Template
#+begin_src emacs-lisp
  ("d" "default" plain
   "%?"
   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
   :unnarrowed t)
#+end_src

*** Book Template
#+begin_src emacs-lisp
  ("b" "book notes" plain (file "/mnt/chromeos/GoogleDrive/MyDrive/SchoolDocuments/Notes/RoamTemplates/book.org")
   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
   :unnarrowed t)
#+end_src

*** Class Template
#+begin_src emacs-lisp
  ("c" "class" plain (file "/mnt/chromeos/GoogleDrive/MyDrive/SchoolDocuments/Notes/RoamTemplates/class.org")
   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
   :unnarrowed t)
#+end_src

*** End of Org Roam Capture Templates
#+begin_src emacs-lisp
  ))
#+end_src

** Org Roam Bindings
#+begin_src emacs-lisp
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n i" . org-roam-node-insert)
             :map org-mode-map
             ("C-M-i" . completion-at-point))
      :config
      (org-roam-setup)
  #+end_src

** End of Org Roam Block
  #+begin_src emacs-lisp
  )
#+end_src

* Development
** Rainbow delimeters
 * See the nested parentheses (God send) but only in programming-mode
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
 #+end_src

** Magit
 * Magit integration (git integration for emacs)
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

* You have now reached the end of the configuration.
 * Do you cringe or are you enlightened? Have a great day :)
#+begin_src 
 _________________________________________
/ Invent and fit; have fits and reinvent! \
| We toast the Lisp programmer who pens   |
| his thoughts within nests of            |
\\ parentheses.                           /
  ---------------------------------------
         \   ^__^ 
          \  (oo)\_______
             (__)\       )\/\\
                 ||----w |
                 ||     ||
#+end_src
